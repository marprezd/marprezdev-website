// src/components/BaseLayout.tsx
import type { Metadata } from "next"
import { ColorSchemeScript, mantineHtmlProps, MantineProvider } from "@mantine/core"
import { NextIntlClientProvider } from "next-intl"
import { getMessages } from "next-intl/server"
import localFont from "next/font/local"
import Head from "next/head"
import { theme } from "../../theme"
import "@mantine/core/styles.css"

const geistSans = localFont({
  src: "../../public/fonts/Geist[wght].woff2",
  variable: "--font-geist-sans",
  weight: "100 900",
  display: "swap",
})

const geistMono = localFont({
  src: "../../public/fonts/GeistMono[wght].woff2",
  variable: "--font-geist-mono",
  weight: "100 900",
  display: "swap",
})

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
}

/**
 * Base layout component
 * @param props - The component props
 * @param props.children - The child components to render
 * @param props.locale - The locale string for internationalization
 * @returns The base layout with providers
 */
export default async function BaseLayout({
  children,
  locale,
}: Readonly<{
  children: React.ReactNode
  locale: string
}>) {
  const messages = await getMessages()

  return (
    <html
      lang={locale}
      {...mantineHtmlProps}
      suppressHydrationWarning
      className={`${geistSans.variable} ${geistMono.variable}`}
    >
      <Head>
        <ColorSchemeScript defaultColorScheme="auto" />
      </Head>
      <body>
        <NextIntlClientProvider messages={messages}>
          <MantineProvider defaultColorScheme="auto" theme={theme}>
            {children}
          </MantineProvider>
        </NextIntlClientProvider>
      </body>
    </html>
  )
}
